#  -*- mode: shell-script -*-

[[ "$AWS_ENV" == development* ]] && awsregion us-west-1

[ -d /opt/unity/unitycloud-ops ] && export UNITYCLOUDOPS=/opt/unity/unitycloud-ops

EC2_ROLE="${EC2_ROLE#fullstack-}"

if [ -n "$EC2_ROLE" ]; then
    SECRET_FILE=`find /var/opt -name "${EC2_ROLE//-jobs}-secret_token.${EC2_ENV}" | xargs -r ls -t | head -1`
    [ -f "$SECRET_FILE" ] && . "$SECRET_FILE"
fi

alias reset_dev='rm -rfv devrepos/* db/*.sqlite3; mysql -uroot -e "drop database unity_cloud_collab"; rake db:create db:migrate'
alias mcls='ruby -I /opt/unity/unity-collab-service/current/vendor/bundle/ruby/2.3.0/gems/dalli-2.7.6/lib ~/bin/memcache_list_keys'

if $IAMME && $INTERACTIVE && ihave s; then
    shopt -s nullglob # empty list if no match
    # FIXME: this assigns unity-collab-ui to be collab (fix to know -service or -ui)
    for d in /opt/unity/unity*; do
        n=`basename "$d" | cut -d- -f2`
        t=`basename "$d" | cut -d- -f3`
        [ "$t" = 'service' ] || n="${n}${t}"
        test -f "$SDIRS" && grep -q "$n" "$SDIRS" && continue
        [ -d "${d}/current" ] && d="${d}/current"
        (cd "$d" && s "$n")
    done
    shopt -u nullglob
    [ -f "$SDIRS" ] && chmod 644 "$SDIRS" # allow nobody and others to read bashmark entries
fi

function health()
{
    myps unicorn
    ls -ld `readlink /opt/unity/unity-collab-service/current`
    local h="$(curl -sqf -u "build:${BUILD_SERVICE_SECRET}" localhost:8080/api/health)"
    echo "$h"
    eval `echo "$h" | sed -n 's/.*version":"\([^"]*\).*/local version=\1/p'`
    echo -n "${version}  ->"
    (cd /opt/unity/unity-collab-service/current; git branch -r --contains "$version")
}


function whitelist_check()
{
    # TODO: _any_ access token will work, so snag the first one in memcache not expired...
    if [ -z "$ACCESS_TOKEN" -o $# -lt 1 ]; then
        echo 'usage: ACCESS_TOKEN=sekritz whitelist_check <org_fk> [<org_fk>...]' >&2
        return 1
    fi
    local org_fks="$(join , "$@")"
    curl -H "Authorization: Bearer $t" "localhost:5001/v1/alpha-features/api/whitelist/COLLAB/${org_fks}"
    echo
}

function core()
{
    local cargs
    local user_fk='collab'
    if [ "$1" = '-v' ]; then
        shift; cargs='-v'
    else
        cargs='-qsf'
    fi
    if [ "$1" = '-u' ]; then
        shift; user_fk=$1; shift
    fi
    if [ $# -ne 1 ]; then
        echo 'usage core [-v] [-u <user_fk>] <path>'
        return 1
    fi
    curl $cargs -L -u "${user_fk}:${CORE_API_SECRET}" "https://${AWS_ENV_PREFIX}core.cloud.unity3d.com$1"
    local rc=$?
    echo
    return $?
}

function sshrails()
{
    local rhost srvc
    if [ $# -lt 1 ]; then
        echo 'usage: sshrails <remote_host> [<rails_options>...]' >&2
        return 1
    fi

    rhost="$1"; shift

    \ssh -t "$rhost" bash -ic "'
sudo -u nobody -i bash -c \"\
cd /opt/unity/unity-\${EC2_ROLE}-service/current;\
. \$SECRET_FILE;\
export RAILS_ENV=\$EC2_ENV;\
bin/rails "$@"\"'"
}

function volfor()
{
    local pfk="$(downcase "$1")"
    if $IAMME; then
        sudo su -c 'ls -d /mnt/repos/volume*/*/'$pfk
    else
        ls -d /mnt/repos/volume*/*/$pfk
    fi
}

function beanview()
{
    if [ $# -ne 1 ]; then
        echo 'usage: beanstalkd_view <host>' >&2
        return 1
    fi

    local privip
    if [[ $1 = production-* || $1 = staging-* ]]; then
        privip=`grep -A1 -F $1.private ~/.ssh/config | tail -1 | awk '{print $2}'`
    else
        privip=127.0.0.1
    fi

    local port=$(( ((RANDOM<<15)|RANDOM) % 63001 + 2000 ))
    \ssh -L$port:$privip:11300 -o 'ExitOnForwardFailure yes' -nfN $1 || return $?
    local sshpid=`pgrep -f ExitOnForwardFailure`

    BEANSTALK_URL="beanstalk://localhost:$port/" \beanstalkd_view -F
    kill $sshpid
}
complete -F _ssh beanview

function invalidate_cdn()
{
    if [ $# -lt 1 ]; then
        echo 'usage: invalidate_cdn <env> [<env> ...]' >&2
        return 1
    fi

    local objects=()
    while [ $# -gt 0 ]; do
        objects+=('"https://public-cdn.cloud.unity3d.com/config/'$1'"')
        shift
    done

    http -va "public-cloud-api@unity3d.com:${CDN_API_SECRET}" \
         https://api.ccu.akamai.com/ccu/v2/queues/default \
         'action:="invalidate"' 'objects:=['"$(join , "${objects[@]}")"']'
}

if ihave papertrail; then
    alias pt-prod='pt -g "Collab Production"'
fi

# TODO: add helper to cp files
# for h in `host 'production-(jobs-)?collab(-jobs)?-\d+$' | awk '{print $1 ".private"}'`; do ( scp ${h}:/opt/unity/unity-collab-service/current/log/production.log /Users/brad/work/logs/${h}-rails.log & ); done

if [ "$(id -un)" = 'nobody' ]; then
    function collab_exec()
    {
        g collab && ./bin/bundle exec "$@"
    }

    function clone_project()
    {
        git clone "$(volfor $1)" /tmp/$1 && cd /tmp/$1
    }
else
    function collab_exec()
    {
        sudo -u nobody bash -ic "cd '$(p collab)' && ./bin/bundle exec $(shellwords "$@")"
    }

    function clone_project()
    {
        sudo -u nobody git clone "$(volfor $1)" /tmp/$1 && cd /tmp/$1 && sudo chown -R "$(id -un):" .
    }
fi

function collab_rbtrace
{
    collab_exec rbtrace --ps 'unicorn worker' -e "$@"
}

function collab_loglevel()
{
    collab_rbtrace "Rails.logger.level = :$1"
}

function convert_pointers()
{
    if [ $# -ne 1 ]; then
        echo 'usage: convert_pointers <directory>' >&2
        return 1
    fi

    # convert dev-user to be dev/user for bucket
    local prefix="s3://unitycloud-collab-store-${AWS_ENV/-${USER}//${USER}}"
    local dir="$(cd "$1" && pwd -P)"
    local pfk="$(basename "$dir")"
    find "$dir" -name .git -prune -o -type f -print | while read fn; do
        md5="$(awk '/^uc_md5/{print $2}' "$fn")"
        if [ -z "$md5" ]; then
            echo "No MD5 found in ${fn}" >&2
        else
            key="${prefix}/${pfk}/${md5}"
            mv -v "$fn" "${fn}.pointer"
            aws s3 cp "$key" "$fn" || mv -v "${fn}.pointer" "$fn"
        fi
    done
}

function unconvert_pointers()
{
    if [ $# -ne 1 ]; then
        echo 'usage: convert_pointers <directory>' >&2
        return 1
    fi

    find "$1" -name .git -prune -o -type f -name '*.pointer' -print | while read fn; do
        dir="$(dirname "$fn")"
        orig="${dir}/$(basename "$fn" .pointer)"
        mv -vf "$fn" "$orig"
    done
}

HG_REVISION_CACHE_FN="${HOME}/.hg_revision_cache"
function hg_find_revision_log()
{
    if [ $# -ne 1 ]; then
        echo 'usage: hg_find_revision_log <hex_revision_id>' >&2
        return 1
    fi

    local hrev="$1"
    local info

    touch "$HG_REVISION_CACHE_FN"

    info="$(sed -n '/^changeset:.*:'"${hrev}"'/,/^summary/ p' "$HG_REVISION_CACHE_FN")"
    if [ -n "$info" ]; then
        # echo '(cached)'
        echo "$info"
        return
    fi

    (
        cd ~/work/editor
        info="$(hg log -r "$hrev")"
        if [ -z "$info" ]; then
            hrev2="$(hg log -l10000 | grep -m1 "^parent: .*${hrev}" | awk -F: '{print $3}')"
            if [ -n "$hrev2" ]; then
                info="$(hg log -r "$hrev2")"
            else
                echo "Unable to find ${hrev}"
                return 1
            fi
        fi
        echo "$info" | tee -a "$HG_REVISION_CACHE_FN"
    )
}

# TODO: make this periodically (once a day/hour?) hg pull -b 5.4/staging and /release
#       (otherwise, ends up missing... or maybe do that when failed to find a version!)
function hg_user_agent_revision()
{
    local tag=false
    if [ "$1" = '-tag' ]; then
        shift; tag=true
    fi
    if [ $# -lt 1 ]; then
        echo 'usage: hg_user_agent_revision -tag <text_that_includes_user_agent>...' >&2
        return 1
    fi
    local rev="$(grep -oE '[[:digit:]]{4,}' <<< "$*")"
    if [ -z "$rev" ]; then
        echo 'Unable to extract revision' >&2
        return 2
    fi
    local hrev="$(printf %06x "$rev")"
    if $tag; then
        hg_find_revision_log "$hrev" | awk '/^tag:/{print $2}'
    else
        echo "Finding revision ${hrev} (${rev})..."
        hg_find_revision_log "$hrev"
    fi
}

function report_project_versions()
{
    local lfn
    [ -f "$1" ] && lfn="$1" || lfn='-'

    if test $# -eq 0 && istty stdin; then
        echo 'usage: report_project_versions [<access_log_file>]' >&2
        return 1
    fi

    cat "$lfn" | while read line; do
        res="$(echo "$line" | sed -n 's/^.*projects\/\([^\/]*\).*UnityEditor\/\([^ ]*\).*/upid="\1";ver="\2"/p')"
        eval "$res"
        if [ -z "$upid" -o -z "$ver" ]; then
            continue
        fi
        tag="$(hg_user_agent_revision -tag "$ver")"
        rc=$?
        if [ -z "$tag" -o $rc -ne 0 ]; then
            echo "Failed to get tag for ${ver}" >&2
        else
            echo "${upid}:${tag}:${ver}"
        fi
    done
}
