#  -*- mode: shell-script -*-

[[ "$AWS_ENV" == development* ]] && awsregion us-west-1

[ -d /opt/unity/unitycloud-ops ] && export UNITYCLOUDOPS=/opt/unity/unitycloud-ops

EC2_ROLE="${EC2_ROLE#fullstack-}"

if [ -n "$EC2_ROLE" ]; then
    SECRET_FILE=`find /var/opt -name "${EC2_ROLE//-jobs}-secret_token.${EC2_ENV}" | xargs -r ls -t | head -1`
    [ -f "$SECRET_FILE" ] && . "$SECRET_FILE"
fi

alias reset_dev='rm -rfv devrepos/* db/*.sqlite3; mysql -uroot -e "drop database unity_cloud_collab"; rake db:create db:migrate'
alias mcls='ruby -I /opt/unity/unity-collab-service/current/vendor/bundle/ruby/2.3.0/gems/dalli-2.7.6/lib ~/bin/memcache_list_keys'

if $IAMME && $INTERACTIVE && ihave s; then
    shopt -s nullglob # empty list if no match
    # FIXME: this assignes unity-collab-ui to be collab (fix to know -service or -ui)
    for d in /opt/unity/unity*; do
        n=`basename "$d" | cut -d- -f2`
        t=`basename "$d" | cut -d- -f3`
        [ "$t" = 'service' ] || n="${n}${t}"
        test -f "$SDIRS" && grep -q "$n" "$SDIRS" && continue
        [ -d "${d}/current" ] && d="${d}/current"
        (cd "$d" && s "$n")
    done
    shopt -u nullglob
    [ -f "$SDIRS" ] && chmod 644 "$SDIRS" # allow nobody and others to read bashmark entries
fi

function health()
{
    myps unicorn
    ls -ld `readlink /opt/unity/unity-collab-service/current`
    local h="$(curl -sqf -u "build:${BUILD_SERVICE_SECRET}" localhost:8080/api/health)"
    echo "$h"
    eval `echo "$h" | sed -n 's/.*version":"\([^"]*\).*/local version=\1/p'`
    echo -n "${version}  ->"
    (cd /opt/unity/unity-collab-service/current; git branch -r --contains "$version")
}

# FIXME: thjis is no longer valid, need to ask genesis (and should also look at memcache)
function whitelist()
{
    ruby -ryaml -e 'YAML.load_file("/var/opt/unity-collab-service/whitelist.yml")["'$RAILS_ENV'"]["collab"].each{|o|puts o}'
}

function core()
{
    local user_fk='collab'
    if [ "$1" = '-u' ]; then
        shift; user_fk=$1; shift
    fi
    if [ $# -ne 1 ]; then
        echo 'usage core [-u <user_fk>] <path>'
        return 1
    fi
    curl -vL -u "${user_fk}:${CORE_API_SECRET}" "https://${AWS_ENV_PREFIX}core.cloud.unity3d.com$1"
    local rc=$?
    echo
    return $?
}

function sshrails()
{
    local rhost srvc
    if [ $# -lt 1 ]; then
        echo 'usage: sshrails <remote_host> [<rails_options>...]' >&2
        return 1
    fi

    rhost="$1"; shift

    \ssh -t "$rhost" bash -ic "'
sudo -u nobody -i bash -c \"\
cd /opt/unity/unity-\${EC2_ROLE}-service/current;\
. \$SECRET_FILE;\
export RAILS_ENV=\$EC2_ENV;\
bin/rails "$@"\"'"
}

function volfor()
{
    local pfk="$(downcase "$1")"
    if $IAMME; then
        sudo su -c 'ls -d /mnt/repos/volume*/*/'$pfk
    else
        ls -d /mnt/repos/volume*/*/$pfk
    fi
}

function beanview()
{
    if [ $# -ne 1 ]; then
        echo 'usage: beanstalkd_view <host>' >&2
        return 1
    fi

    local privip
    if [[ $1 = production-* || $1 = staging-* ]]; then
        privip=`grep -A1 -F $1.private ~/.ssh/config | tail -1 | awk '{print $2}'`
    else
        privip=127.0.0.1
    fi

    local port=$(( ((RANDOM<<15)|RANDOM) % 63001 + 2000 ))
    \ssh -L$port:$privip:11300 -o 'ExitOnForwardFailure yes' -nfN $1 || return $?
    local sshpid=`pgrep -f ExitOnForwardFailure`

    BEANSTALK_URL="beanstalk://localhost:$port/" \beanstalkd_view -F
    kill $sshpid
}
complete -F _ssh beanview

function invalidate_cdn()
{
    if [ $# -lt 1 ]; then
        echo 'usage: invalidate_cdn <env> [<env> ...]' >&2
        return 1
    fi

    local objects=()
    while [ $# -gt 0 ]; do
        objects+=('"https://public-cdn.cloud.unity3d.com/config/'$1'"')
        shift
    done

    http -va "public-cloud-api@unity3d.com:${CDN_API_SECRET}" \
         https://api.ccu.akamai.com/ccu/v2/queues/default \
         'action:="invalidate"' 'objects:=['"$(join , "${objects[@]}")"']'
}

if ihave papertrail; then
    alias pt-prod='pt -g "Collab Production"'
fi

# TODO: add helper to cp files
# for h in `host 'production-(jobs-)?collab(-jobs)?-\d+$' | awk '{print $1 ".private"}'`; do ( scp ${h}:/opt/unity/unity-collab-service/current/log/production.log /Users/brad/work/logs/${h}-rails.log & ); done

# TODO: add helper to find context for a given exception reported by dot-bot

# TODO: add helper to get files from git pointers using aws s3 cp

if [ "$(id -un)" = 'nobody' ]; then
    function collab_exec()
    {
        g collab && ./bin/bundle exec "$@"
    }
else
    function collab_exec()
    {
        sudo -u nobody bash -ic "cd '$(p collab)' && ./bin/bundle exec $(shellwords "$@")"
    }
fi

function collab_loglevel()
{
    collab_exec rbtrace --ps 'unicorn worker' -e "Rails.logger.level = :$1"
}
