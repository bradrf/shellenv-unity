#!/bin/bash

function usage_exit()
{
    cat <<EOF >&2

usage: $(basename "$0" .sh) [-e <env>] [-r <client_role>] [-z <region_zone>] <custom_environment_name>

EOF
    exit $1
}

emulation='default'
client_role='cluster-client'
region_zone='us-west-1b'

while getopts 'e:r:z:' opt; do
    case $opt in
        e) emulation="$OPTARG";;
        r) client_role="$OPTARG";;
        z) region_zone="$OPTARG";;
        *) usage_exit 1;;
    esac
done

shift $((OPTIND-1)) # move all remain args to first position
[ $# -eq 1 ] || usage_exit 2

PATH="${PATH}:/opt/unity/unitycloud-ops/bin"
envname="$1"

use_group=true
case "$emulation" in
    p*)
        cluster_type='m4.xlarge'
        arbiter_type='t2.small'
        client_type='t2.medium'
        ;;
    s*)
        cluster_type='m4.xlarge'
        arbiter_type='t2.small'
        client_type='t2.medium'
        ;;
    *)
        cluster_type='t2.medium'
        arbiter_type='t2.small'
        client_type='t2.micro'
        use_group=false
        ;;
esac

set -x
set -e

pids=()

trap '{ kill -9 ${pids[@]}; exit 127; }' TERM INT

if $use_group; then
    group_name="${envname}-collab-cluster-${region_zone}"
    if ! aws ec2 describe-placement-groups --group-names "$group_name"; then
        aws ec2 create-placement-group --group-name "$group_name" --strategy cluster
    fi
    group_opt="--placement-group ${group_name}"
fi

# Launch and start ansible run against the cluster nodes
instance-launch -e custom:${envname} -r cluster-node -n ${envname}-cluster-1 -p ${region_zone} \
                -t $cluster_type --tags gluster_volume:volume1 --nomonitoring $group_opt
instance-launch -e custom:${envname} -r cluster-node -n ${envname}-cluster-2 -p ${region_zone} \
                -t $cluster_type --tags gluster_volume:volume1 --nomonitoring $group_opt
ec2_wait_for -i 10 ok /^${envname}-cluster/
run-ansible -v -r collab-cluster -t ${envname}-cluster &
pids+=($!)

# Launch and setup the arbiter and clients
instance-launch -e custom:${envname} -r cluster-node -n ${envname}-arbiter-1 -p ${region_zone} \
                -t $arbiter_type --nomonitoring

instance-launch -e custom:${envname} -r collab -n ${envname}-client-1 -p ${region_zone} \
                -t $client_type --nomonitoring
instance-launch -e custom:${envname} -r collab -n ${envname}-client-2 -p ${region_zone} \
                -t $client_type --nomonitoring

aws_ssh_config &
pids+=($!)

(
    ec2_wait_for -i 10 ok /^${envname}-arbiter/
    run-ansible -v -r collab-cluster-arbiter -t ${envname}-arbiter-1 --extra-vars gluster_volume_name=volume1
) &
pids+=($!)

(
    ec2_wait_for -i 10 ok /^${envname}-client/
    run-ansible -v -r ${client_role} -t ${envname}-client
) &
pids+=($!)

final_rc=0
set +e
for pid in "${pids[@]}"; do
    wait $pid
    rc=$?
    if [ $rc -ne 0 ]; then
        echo "PID ${pid} failed with return code ${rc}" >&2
        (( final_rc++ ))
    fi
done

exit $final_rc
