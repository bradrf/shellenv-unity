#!/bin/bash

ctype='t2.medium'
crole='cluster-client'

function usage_exit()
{
    cat <<EOF

usage: $(basename "$0" .sh) [-t <cluster_instance_type>] [-r <client_role>] <custom_environment_name>

EOF
    exit $1
}

while getopts 't:r:' opt; do
    case $opt in
        t) ctype=$OPTARG;;
        r) crole=$OPTARG;;
        *) usage_exit 1;;
    esac
done

shift $((OPTIND-1)) # move all remain args to first position
[ $# -eq 1 ] || usage_exit 2

PATH="${PATH}:/opt/unity/unitycloud-ops/bin"
envname="$1"

set -x
set -e

# TODO: add placement group
# TODO: catch sigint and kill children procs

(
    instance-launch -e custom:${envname} -r cluster-node -n ${envname}-cluster-1 -p us-west-1c \
                    -t $ctype --tags gluster_volume:volume1 --nomonitoring
    instance-launch -e custom:${envname} -r cluster-node -n ${envname}-cluster-2 -p us-west-1c \
                    -t $ctype --tags gluster_volume:volume1 --nomonitoring
    ec2_wait_for -i 10 ok /^${envname}-cluster/
    run-ansible -v -r collab-cluster -t ${envname}-cluster
) &

sleep 5 # get ahead to try avoiding premature connection to the cluster by arbiter/client nodes

(
    instance-launch -e custom:${envname} -r cluster-node -n ${envname}-arbiter-1 -p us-west-1c \
                    -t t2.micro --nomonitoring
    ec2_wait_for -i 10 ok /^${envname}-arbiter/
    run-ansible -v -r collab-cluster-arbiter -t ${envname}-arbiter-1 --extra-vars gluster_volume_name=volume1
) &

(
    instance-launch -e custom:${envname} -r collab -n ${envname}-client-1 -p us-west-1c \
                    -t t2.micro --nomonitoring
    instance-launch -e custom:${envname} -r collab -n ${envname}-client-2 -p us-west-1b \
                    -t t2.micro --nomonitoring
    ec2_wait_for -i 10 ok /^${envname}-client/
    run-ansible -v -r ${crole} -t ${envname}-client
) &

wait

aws_ssh_config
