#!/bin/bash

if [ "$1" = '-i' ]; then
    shift; instance_id="$1"; shift
else
    instance_id="$(ec2metadata --instance-id)"
fi

if [ "$1" = '-w' ]; then
    shift; wait_seconds="$1"; shift
else
    wait_seconds=60
fi

if [[ $# -lt 4 || -z "$instance_id" ]]; then
    cat <<EOF >&2

usage: $(basename "$0" .sh) [-i <instance_id>] [-w <wait_seconds>] { restart | stop | start } \
<service_name> <elb_name> [<elb_name> ...]

EOF
    exit 1
fi

if [ $(id -u) -ne 0 ]; then
    echo 'Must be root. Perhaps run with sudo?' >&2
    exit 2
fi

action="$1"; shift
stopping=false
starting=false
case "$action" in
    restart)
        stopping=true
        starting=true
        ;;
    stop)
        stopping=true
        ;;
    start)
        starting=true
        ;;
    *)
        echo "Unknown action: ${1}" >&2
        exit 3
esac

service_name="$1"; shift
elb_names="$*"

function now()
{
    date +%s
}

function get_conns()
{
    ss -n -o state established '( sport = :http )' | grep ^tcp | grep "$@" -vF 127.0.0.1
}

AWS_AVAILABILTY_ZONE="$(ec2metadata --availability-zone)"
AWS_DEFAULT_REGION="${AWS_AVAILABILTY_ZONE%?}" # strip availibility character at end
export AWS_AVAILABILTY_ZONE AWS_DEFAULT_REGION

if $stopping; then
    q='LoadBalancerAttributes.ConnectionDraining.Timeout'
    for name in $elb_names; do
        elb_drain=`aws elb describe-load-balancer-attributes --load-balancer-name "$name" --query $q`
        if [ -n "$elb_drain" ] && [ $elb_drain -gt $wait_seconds ]; then
           echo "Setting wait_seconds=${elb_drain} (${name})"
           wait_seconds=$elb_drain
        fi
        echo "Removing ${instance_id} from ${name}:"
        aws --output text elb deregister-instances-from-load-balancer \
            --load-balancer-name "$name" --instances "$instance_id"
    done

    expiry=`now`; (( expiry+=$wait_seconds ))
    while [ `now` -lt $expiry ]; do
        conns=`get_conns -c`
        if [ $conns -gt 0 ]; then
            echo "Waiting on ${conns} HTTP connections to drain..."
            [ $conns -lt 10 ] && get_conns
            sleep 5
        else
            break
        fi
    done

    conns=`get_conns -c`
    [ $conns -gt 0 ] && echo "Gave up waiting on ${conns} to drain" >&2

    echo "Stopping ${service_name}"
    service "$service_name" stop

    $starting && sleep 3 # give restart a little time to stop before starting
fi

if $starting; then
    echo "Starting ${service_name}"
    service "$service_name" start

    for name in $elb_names; do
        echo "Adding ${instance_id} to ${name}:"
        aws --output text elb register-instances-with-load-balancer \
            --load-balancer-name "$name" --instances "$instance_id"
    done
fi
