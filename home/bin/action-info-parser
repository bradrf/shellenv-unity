#!/usr/bin/env ruby

require 'json'

BN = File.basename($0, '.rb')
if ARGV.size < 1
  $stderr.puts <<EOF

usage: #{BN} { <log_file> | - } [<count>]

   Use a single dash to read from standard input.

   Count indicates number of action_info entries to show before exiting.

   For example, find the most recent action info for a particular project key...

     > tac production_log.expanded | grep -F ca414de4-99d5-4e5c-8259-025760d5756b | action-info-parser

   ...or, find the most recent commit failure for the same key...

     > tac production_log.expanded | grep -F 6bfedb51-5c35-47fc-9056-0297d082d2f6 | \
grep -E 'status=(4|5)' | ruby ~/action-info-parser -

EOF
  exit 1
end

logf = ARGV[0] == '-' ? $stdin : File.open(ARGV[0])
count = (ARGV[1] || 1).to_i
line_num = 0

logf.each_line do |line|
  line_num += 1
  line.include?('"action_info"') or next
  i = line.index(':controller=') or next
  hdr = line.slice!(0, i)
  begin
    line.prepend('{')
    other_info = eval(line)
  rescue Exception => ex
    fn = "#{BN}-eval-failure-#{$$}.line"
    $stderr.puts("[#{fn}] #{ex.class} #{ex.message}: count=#{line_num} hdr=#{hdr}")
    File.write(fn, line)
    next
  end
  params = other_info[:params]
  action_info = JSON.load(params.delete('action_info'))
  data = action_info['data']
  counts = [:add_or_update,:move,:delete].inject({}){|h,s| h[s] = (data[s.to_s] || []).size; h}
  puts '-'*100, "#{hdr}#{other_info} #{params}"
  puts JSON.pretty_generate(action_info), counts
  count -= 1
  count > 0 or break
end
