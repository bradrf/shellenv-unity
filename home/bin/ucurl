#!/bin/bash

VERSION='0.3.1'
VERBOSITY=0
HEADERS=()
PRETTY=false
EVAL=false
FOLLOW=false
INSECURE=false
LOGIN=false
ME=false
AUTH_HDR=false
SAVE=''

# TODO: FIX SSL with either        --resolve <host:port:address> or --insecure

while true; do
    case "$1" in
        -v)            (( ++VERBOSITY ));;
        -H)     shift; HEADERS+=("$1");;
        -host)  shift; HOST_OVERRIDE=$1;;
        -pretty)       PRETTY=true;;
        -eval)         EVAL=true;;
        -follow)       FOLLOW=true;;
        -insecure)     INSECURE=true;;
        -login)        LOGIN=true;;
        -save)  shift; SAVE=$1;;
        -limit) shift; LIMIT=$1;;
        *)      break;;
    esac
    shift
done

if $PRETTY && $EVAL; then
    echo 'Can not use both -pretty and -eval for output' >&2
    exit 2
fi

BN="$(basename "$0" .sh)"
if [[ $# -lt 3 ]]; then
    cat <<EOF >&2

usage: ${BN} [<options>] <cloud_env> <method> <url> [<body> | <file>]
       ${BN} [<options>] <cloud_env> get { me | auth }

  ${BN} (v${VERSION}) is a tool to automatically handle authentication and URL selection when
        working with Unity HTTP APIs (while keeping dependencies at a minimum, requiring only bash,
        python, awk, and sed)

        NOTE: sensitive access and refresh tokens are stored in the file system (${HOME}/.${BN}*)

  OPTIONS:
    -v             increase verbosity of output (show HTTP headers, etc.)
    -H             add a custom header (can be used multiple times)
    -host <val>    host header value (otherwise uses host from <url>; can be a variable name)
    -follow        follow 302 redirects using the indicated Location header
    -limit <speed> restrict the transfer rate (see Curl manpage)
    -insecure      do not verify certifcate
    -login         force login (ask for credentials)
    -pretty        write JSON nicely formatted (does not work w/ -eval)
    -eval          write JSON response as evaluable shell key/value pairs (does not work w/ -pretty)
    -save <file>   write response to <file>

  CLOUD ENV:   local | dev | stag[ing] | prod[uction]

  METHOD:      get | post | put | del[ete]

  URL:         provide a full URL -- may contain keys from the CLOUD ENV config retrieved

    ABBREV:
      config     dump the set of key/values available in CLOUD ENV
      me         show info about current user for CLOUD ENV

  BODY:        provide the value sent using curl's data-binary option (assumes JSON format)
  FILE:        provide a filename to read and send using curl's data-binary option (detects content type)

EOF
    if [[ "$1" = 'ex'* ]]; then
        cat <<EOF >&2
  EXAMPLES:

    list all of your orgs in the "dev" cloud environment:
      # ucurl dev get \\\${GENESIS_API_URL}/v1/core/api/orgs

    list all unarchived projects in the "bradandy" org:
      # ucurl dev get \\\${GENESIS_API_URL}/v1/core/api/orgs/bradandy/projects | \\
          awk -F\\" '/"name"/{n=\$4};/guid/{g=\$4};/archived.*false/{print g,n}'

    create a project:
      # ucurl dev post \\\${GENESIS_API_URL}/v1/core/api/projects '{"name":"my-new-project"}'

    archive a project:
      # ucurl dev delete \\\${GENESIS_API_URL}/v1/core/api/orgs/bradandy/projects/95015c7a-b24b-4301-b2ae-844502f1cb7c

    unarchive a project:
      # ucurl dev put \\\${GENESIS_API_URL}/v1/core/api/orgs/bradandy/projects/95015c7a-b24b-4301-b2ae-844502f1cb7c/unarchive

    enable the collab service flag:
      # ucurl dev put \\\${GENESIS_API_URL}/v1/core/api/projects/5983bb66-2a3c-4f32-8d38-3e1befd2482a/service_flags '{"service_flags":{"collab":true}}'

    list all the service flags for a project:
      # ucurl dev get \\\${GENESIS_API_URL}/v1/core/api/projects/5983bb66-2a3c-4f32-8d38-3e1befd2482a/service_flags

    get the most recent revision from a project hosted in Collab:
      # ucurl -pretty dev get \\\${COLLAB}/api/projects/6086dd15-f6c1-4c7e-8411-34cc5183008b/branches/master/revisions\\?limit=1

    get a list of all file entries for a Collab project:
      # ucurl -pretty dev get \\\${COLLAB}/api/projects/6086dd15-f6c1-4c7e-8411-34cc5183008b/branches/master/revisions/HEAD/entries\?recurse

    get a signed URL from Collab for an MD5 file for uploading:
      # ucurl dev post \\\${COLLAB}/api/projects/6086dd15-f6c1-4c7e-8411-34cc5183008b/uploads '{"files":["2c087aca87fe65bb31d6e15835965712"]}'

    display detail health from Collab service:
      # ucurl -pretty dev get \\\${COLLAB}/api/health\?include=memory,raindrops

    force use of alternate region:
      # ucurl -v -host \\\$COLLAB prod get https://kong-prod-euc1-public.cloud.unity3d.com/api/health

    download a file from Collab:
      # ucurl -save myfancyfile -follow dev get \\\${COLLAB}/api/projects/6086dd15-f6c1-4c7e-8411-34cc5183008b/cache/source/2c087aca87fe65bb31d6e15835965712

EOF
    else
        cat <<EOF >&2
  [ To include a list of examples: ${BN} examples ]

EOF
    fi
    exit 1
fi

case "$1" in
    local) CLOUD_ENV=local;;
    dev) CLOUD_ENV=dev;;
    stag*) CLOUD_ENV=staging;;
    prod*) CLOUD_ENV=production;;
    *)
        echo "Unknown environment: $1" >&2
        exit 3
esac
shift

case "$1" in
    get)  METHOD=GET;;
    post) METHOD=POST;;
    put) METHOD=PUT;;
    del*)  METHOD=DELETE;;
    *)
        echo "Unknown method: $1" >&2
        exit 4
esac
shift

URL="$1"; shift

if [[ $# -gt 0 ]]; then
    if [[ -f "$1" ]]; then
        BODY="@$1"
        BODY_SIZE="$(wc -c < "$1" | tr -d '[:space:]')"
        [[ "${HEADERS[@]}" =~ 'Content-Type:' ]] || HEADERS+=("Content-Type: $(file -b --mime-type "$1")")
    else
        BODY="$1"
        BODY_SIZE=${#BODY}
    fi
    shift
else
    BODY_SIZE=0

    case "$URL" in
        me)   ME=true ;;
        auth) AUTH_HDR=true ;;
    esac

    if $ME || $AUTH_HDR; then
        URL=\${GENESIS_API_URL}/v1/core/api/users/me
    fi
fi

umask 0077 # protect files like the user credentials cache to be accessible only by current user

######################################################################

function simple_curl() {
    unset CODE LOCATION RESPONSE

    local expect
    if [[ "$1" = '-expect' ]]; then
        shift; expect=$1; shift
    fi

    local save
    if [[ "$1" = '-save' ]]; then
        shift; save=$1; shift
    fi

    local method=$1; shift
    local url=$1; shift
    local body=$1; shift

    local headers=("$@")
    [[ "${headers[@]}" =~ 'Content-Type:' ]] || headers+=('Content-Type: application/json')

    local hfn="$(mktemp /tmp/${BN}hfn.XXX)"
    local rfn
    if [[ -n "$save" ]]; then
        rfn=$save
    else
        rfn="$(mktemp /tmp/${BN}rsp.XXX)"
    fi

    local cargs=(-A "${BN}/${VERSION}" -D "${hfn}" -o "${rfn}")
    [[ $VERBOSITY -gt 0 ]] && cargs+=(-v)
    $INSECURE && cargs+=(-k)
    if [[ "$method" = 'POST' ]] && [[ -n "$body" ]]; then
        : # let curl infer -X POST (otherwise, Ubuntu version complains)
    else
        cargs+=(-X "$method")
    fi
    for hdr in "${headers[@]}"; do cargs+=(-H "$hdr"); done
    [[ -n "$LIMIT" ]] && cargs+=(--limit-rate "$LIMIT")

    [[ -n "$body" ]] && cargs+=(--data-binary "$body")
    [[ $BODY_SIZE -lt 10485760 ]] && cargs+=(-s) # keep silent for small uploads

    if [[ $VERBOSITY -eq 1 ]]; then
        # redact under "normal" verbosity, otherwise, show it
        curl "${cargs[@]}" "$url" 2> >(sed 's/Bearer .*$/Bearer [REDACTED]/' >&2)
    else
        curl "${cargs[@]}" "$url"
    fi
    local res=$?

    # look for _FINAL_ HTTP status line and get a clean response code and location header
    eval "$(awk '/^HTTP/{c=$2};/^Location:/{l=$2};END{sub("\r","",c);sub("\r","",$2);print "CODE="c";LOCATION=\""$2"\""};' "$hfn")"
    rm -f "$hfn"

    if [[ -z "$save" ]]; then
        RESPONSE="$(cat "$rfn")"
        rm -f "$rfn"
    fi

    [[ -n "$expect" ]] || expect=$CODE
    if [[ $res -ne 0 ]] || [[ $CODE -ne $expect ]]; then
        [[ $VERBOSITY -gt 0 ]] && echo "FAILED:      curl$(printf ' %q' "${cargs[@]}") '$url'" >&2
        cat <<EOF >&2
CURL STATUS: ${res}
HTTP CODE:   ${CODE}
HTTP BODY:   ${RESPONSE}
EOF
        exit 5
    fi
}

function response_to_key_values() {
    echo "$RESPONSE" | \
        python -c 'import sys,json,re; \
print(";".join("%s=\"%s\"" % (re.sub(r"[\W_]+","_",k.upper()),v) for (k,v) in json.load(sys.stdin).items()))'
}

function eval_response() {
    eval "$(response_to_key_values)"
}

function get_access_token() {
    local now body
    local cache_fn="${HOME}/.${BN}_${CLOUD_ENV}_cache"

    if $LOGIN; then
        # force request for credentials and get new tokens
        unset ACCESS_TOKEN REFRESH_TOKEN
    elif [[ -f "$cache_fn" ]]; then
        . "$cache_fn"
        now=$(date +%s)
        if [[ $EXPIRES_AT -le $now ]]; then
            echo "Access token is expired." >&2
            unset ACCESS_TOKEN
        fi
    fi

    if [[ -z "$ACCESS_TOKEN" ]]; then
        if [[ -n "$REFRESH_TOKEN" ]]; then
            body='{"grant_type":"refresh_token","refresh_token":"'"${REFRESH_TOKEN}"'"}'
        else
            read -p 'email? ' email
            read -sp ' pass? ' pass
            echo
            body='{"grant_type":"password","username":"'"${email}"'","password":"'"${pass}"'"}'
        fi

        simple_curl -expect 200 POST "${GENESIS_API_URL}/v1/core/api/login" "$body"
        [[ $VERBOSITY -gt 0 ]] && echo "$RESPONSE" >&2
        eval_response

        EXPIRES_AT=$(( $(date +%s) + $EXPIRES_IN - 30 ))
        echo "ACCESS_TOKEN='${ACCESS_TOKEN}';REFRESH_TOKEN='${REFRESH_TOKEN}';EXPIRES_AT='${EXPIRES_AT}';" > "$cache_fn"
        echo "Access token expires in ${EXPIRES_IN} seconds" >&2
    fi
}

######################################################################

cloudrc="${HOME}/.cloud${CLOUD_ENV}rc"
if [[ -r "$cloudrc" ]]; then
    RESPONSE="$(cat "$cloudrc")"
    CODE=200
else
    simple_curl GET "https://public-cdn.cloud.unity3d.com/config/${CLOUD_ENV}"
    echo "$RESPONSE" > "$cloudrc"
fi

if [[ "$URL" = 'config' ]]; then
    PRETTY=true
else
    eval_response # loads config keys as interpolation variables

    if [[ -n "$HOST_OVERRIDE" ]]; then
        # strip out host if a URI
        final_host="$(eval echo \"${HOST_OVERRIDE}\" | awk -F/ '{print $3}')"
        [[ -z "$final_host" ]] && final_host="$HOST_OVERRIDE"
        HEADERS+=("Host: ${final_host}")
    fi

    if [[ ! "${HEADERS[@]}" =~ 'Authorization:' ]]; then
        get_access_token
        HEADERS+=("Authorization: Bearer ${ACCESS_TOKEN}")
    fi

    if $AUTH_HDR; then
        echo "Authorization: Bearer ${ACCESS_TOKEN}"
        exit
    fi

    $ME && echo "ACCESS_TOKEN: ${ACCESS_TOKEN}"

    # interpolate the URL
    eval "final_url=\"$URL\""

    if [[ "$final_url" != 'http'* ]]; then
        echo "Unknown URL: $final_url" >&2
        exit 6
    fi

    if [[ -n "$SAVE" ]]; then
        simple_curl -save "$SAVE" "$METHOD" "$final_url" "$BODY" "${HEADERS[@]}"
    else
        simple_curl "$METHOD" "$final_url" "$BODY" "${HEADERS[@]}"
    fi
fi

if [[ -n "$SAVE" ]]; then
    echo "Saved to $SAVE" >&2
elif [[ -z "$RESPONSE" ]]; then
    echo "No body received. HTTP status code: ${CODE}" >&2
elif $PRETTY; then
    echo "$RESPONSE" | python -mjson.tool
elif $EVAL; then
    response_to_key_values
else
    echo "$RESPONSE"
fi

lvl=$(( $CODE / 100 ))
[[ $lvl -eq 2 ]] && exit

if $FOLLOW && [[ $CODE -eq 302 ]] && [[ -n "$LOCATION" ]]; then
    echo "Following 302 to ${LOCATION}" >&2
    cargs=(-L)
    [[ $VERBOSITY -gt 0 ]] && cargs+=(-v)
    [[ -n "$SAVE" ]] && cargs+=(-o "$SAVE")
    exec curl "${cargs[@]}" "$LOCATION"
fi

[[ -n "$RESPONSE" ]] && echo "HTTP status code: ${CODE}" >&2
exit $(( $lvl * 10 ))
