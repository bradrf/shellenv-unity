#!/bin/bash

# REQUIREMENTS: Bash v4, Python v2.7

VERSION='0.0.1'
VERBOSE=false
HEADERS=()
PRETTY=false
EVAL=false

while true; do
    case "$1" in
        -v) VERBOSE=true;;
        -H) shift; HEADERS+=($1);;
        -host) shift; HOST_OVERRIDE=$1;;
        -pretty) PRETTY=true;;
        -eval) EVAL=true;;
        *) break;;
    esac
    shift
done

if $PRETTY && $EVAL; then
    echo 'Can not use both -pretty and -eval for output' >&2
    exit 5
fi

BN="$(basename "$0" .sh)"
if [[ $# -lt 3 ]]; then
    cat <<EOF >&2

usage: ${BN} [<options>] <env> <method> <url> [<body> | <file>]

  ${BN} (v${VERSION}) is a tool to automatically handle authentication and URL selection when working with Unity HTTP APIs

  OPTIONS:
    -v           enable verbose output (show HTTP headers, etc.)
    -H           add a custom header (can be used multiple times)
    -host <val>  host header value (otherwise uses host from <url>; can be a variable name)
    -pretty      write JSON nicely formatted (does not work w/ -eval)
    -eval        write JSON response as evaluable shell key/value pairs (does not work w/ -pretty)

  ENV:       l[ocal] | d[ev] | s[taging] | p[roduction]

  METHOD:    g[et] | po[st] | pu[t] | d[elete]

  URL:       provide a full URL -- may contain keys from the ENV config retrieved
             (use a value of "config" to dump the set of key/values available in <env>)

  BODY:      provide the value sent using curl's data-binary option (assumes JSON format)
  FILE:      provide a filename to read and send using curl's data-binary option (assumes JSON content)

  EXAMPLES:

    list all of your orgs in the "dev" cloud environment:
      # ucurl dev get \\\${GENESIS_API_URL}/v1/core/api/orgs

    list all unarchived projects in the "bradandy" org:
      # ucurl dev get \\\${GENESIS_API_URL}/v1/core/api/orgs/bradandy/projects | \\
          awk -F\\" '/"name"/{n=\$4};/guid/{g=\$4};/archived.*false/{print g,n}'

    archive a project:
      # ucurl dev delete \\\${GENESIS_API_URL}/v1/core/api/orgs/bradandy/projects/95015c7a-b24b-4301-b2ae-844502f1cb7c

    unarchive a project:
      # ucurl dev put \\\${GENESIS_API_URL}/v1/core/api/orgs/bradandy/projects/95015c7a-b24b-4301-b2ae-844502f1cb7c/unarchive

    get the most recent revision from a project hosted in Collab:
      # ucurl -pretty dev get \\\${COLLAB}/api/projects/6086dd15-f6c1-4c7e-8411-34cc5183008b/branches/master/revisions\\?limit=1

    get a list of all file entries for a Collab project:
      # ucurl -pretty dev get \\\${COLLAB}/api/projects/6086dd15-f6c1-4c7e-8411-34cc5183008b/branches/master/revisions/HEAD/entries\?recurse

    get a signed URL from Collab for an MD5 file for uploading:
      # ucurl dev post \\\${COLLAB}/api/projects/6086dd15-f6c1-4c7e-8411-34cc5183008b/uploads '{"files":["2c087aca87fe65bb31d6e15835965712"]}'

    display detail health from Collab service:
      # ucurl -pretty dev get \\\${COLLAB}/api/health\?include=memory,raindrops

    force use of alternate region:
      # ucurl -v -host \$COLLAB prod get https://kong-prod-euc1-public.cloud.unity3d.com/api/health

EOF
    exit 1
fi

case "$1" in
    l*) CLOUD_ENV=local;;
    d*) CLOUD_ENV=dev;;
    s*) CLOUD_ENV=staging;;
    p*) CLOUD_ENV=production;;
    *)
        echo "Unknown environment: $1" >&2
        exit 2
esac
shift

case "$1" in
    g*)  METHOD=GET;;
    po*) METHOD=POST;;
    pu*) METHOD=PUT;;
    d*)  METHOD=DELETE;;
    *)
        echo "Unknown method: $1" >&2
        exit 3
esac
shift

URL="$1"; shift

if [[ $# -gt 0 ]]; then
    if [[ -f "$1" ]]; then
        BODY="@$1"
    else
        BODY="$1"
    fi
    shift
fi

umask 0077 # protect files like the user credentials cache to be accessible only by current user

######################################################################

function debug() {
    $VERBOSE && echo "$*" >&2
}

function simple_curl() {
    local method=$1; shift
    local url=$1; shift
    local body=$1; shift
    local headers=("$@")

    [[ "${headers[@]}" =~ 'Content-Type:' ]] || headers+=('Content-Type: application/json')
    local rfn="$(mktemp /tmp/${BN}rsp.XXX)"
    local cargs=(-s -A "${BN}/${VERSION}" -w '%{http_code}' -o "${rfn}")
    $VERBOSE && cargs+=(-v)
    cargs+=(-X "$method")
    for hdr in "${headers[@]}"; do cargs+=(-H "$hdr"); done
    [[ -n "$body" ]] && cargs+=(--data-binary "$body")

    CODE="$(curl "${cargs[@]}" "$url" 2> >(sed 's/Bearer .*$/Bearer [REDACTED]/' >&2))"
    local res=$?
    RESPONSE="$(cat "$rfn")"
    rm -f "$rfn"

    if [[ $res -ne 0 ]]; then
        cat <<EOF >&2
FAILED:      curl$(printf ' %q' "${cargs[@]}") '$url'
CURL STATUS: ${res}
HTTP CODE:   ${CODE}
HTTP BODY:   ${RESPONSE}
EOF
        exit 4
    fi
}

function response_to_key_values() {
    echo "$RESPONSE" | \
python -c 'import sys,json,re; \
print ";".join("%s=\"%s\"" % (re.sub(r"[\W_]+","_",k.upper()),v) for (k,v) in json.load(sys.stdin).items())'
}

function eval_response() {
    eval "$(response_to_key_values)"
}

function get_access_token() {
    local now body
    local cache_fn="${HOME}/.${BN}_${CLOUD_ENV}_cache"

    if [[ -f "$cache_fn" ]]; then
        . "$cache_fn"
        now=$(date +%s)
        if [[ $EXPIRES_AT -le $now ]]; then
            echo "Access token is expired." >&2
            unset ACCESS_TOKEN
        fi
    fi

    if [[ -z "$ACCESS_TOKEN" ]]; then
        if [[ -n "$REFRESH_TOKEN" ]]; then
            body='{"grant_type":"refresh_token","refresh_token":"'"${REFRESH_TOKEN}"'"}'
        else
            read -p 'email? ' email
            read -sp ' pass? ' pass
            echo
            body='{"grant_type":"password","username":"'"${email}"'","password":"'"${pass}"'"}'
        fi

        simple_curl POST "${GENESIS_API_URL}/v1/core/api/login" "$body"
        debug "$RESPONSE"
        eval_response

        EXPIRES_AT=$(( $(date +%s) + $EXPIRES_IN - 30 ))
        echo "ACCESS_TOKEN='${ACCESS_TOKEN}';REFRESH_TOKEN='${REFRESH_TOKEN}';EXPIRES_AT='${EXPIRES_AT}';" > "$cache_fn"
        echo "Access token expires in ${EXPIRES_IN} seconds" >&2
    fi
}

######################################################################

cloudrc="${HOME}/.cloud${CLOUD_ENV}rc"
if [[ -r "$cloudrc" ]]; then
    RESPONSE="$(cat "$cloudrc")"
    CODE=200
else
    simple_curl GET "https://public-cdn.cloud.unity3d.com/config/${CLOUD_ENV}"
    echo "$RESPONSE" > "$cloudrc"
fi

if [[ "$URL" = 'config' ]]; then
    PRETTY=true
else
    eval_response               # loads config keys as interpolation variables

    if [[ -n "$HOST_OVERRIDE" ]]; then
        final_host="$(eval echo \"${HOST_OVERRIDE}\" | awk -F/ '{print $3}')" # strip out host if a URI
        HEADERS+=(-H "Host: ${final_host}")
    fi

    get_access_token            # login to genesis
    eval "final_url=\"$URL\""   # interpolate the URL (e.g. if caller used a config key)

    [[ "${HEADERS[@]}" =~ 'Authorization:' ]] || HEADERS+=("Authorization: Bearer ${ACCESS_TOKEN}")
    simple_curl "$METHOD" "$final_url" "$BODY" "${HEADERS[@]}"
fi

if [[ -z "$RESPONSE" ]]; then
    echo "No body received. HTTP status code: ${CODE}" >&2
elif $PRETTY; then
    echo "$RESPONSE" | python -mjson.tool
elif $EVAL; then
    response_to_key_values
else
    echo "$RESPONSE"
fi

lvl=$(( $CODE / 100 ))
[[ $lvl -eq 2 ]] && exit

[[ -n "$RESPONSE" ]] && echo "HTTP status code: ${CODE}" >&2
exit $(( $lvl * 10 ))
