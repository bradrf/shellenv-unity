#!/bin/bash

# TODO: FILTER OUT ACCESS TOKEN

VERSION='0.0.1'
VERBOSE=false
HEADERS=()

while true; do
    case "$1" in
        -v) VERBOSE=true;;
        -H) shift; HEADERS+=($1);;
        -host) shift; HEADERS+=("Host: $1");;
        *) break;;
    esac
    shift
done

BN="$(basename "$0" .sh)"
if [[ $# -lt 3 ]]; then
    cat <<EOF >&2

usage: ${BN} [<options>] <env> <method> <url> [<body> | <file>]

  VERSION: ${VERSION}

  OPTIONS:
    -v       verbose
    -H       custom header (default Content-Type is application/json)
    -host    host header value (otherwise uses host from <url>)

  ENV:       d[ev] | s[taging] | p[roduction]

  METHOD:    g[et] | po[st] | pu[t] | d[elete]

EOF
    exit 1
fi

case "$1" in
    d*)
        CLOUD_ENV=dev
        CORE=andy-core
        ;;
    s*)
        CLOUD_ENV=staging
        CORE=staging-core
        ;;
    p*)
        CLOUD_ENV=production
        CORE=core
        ;;
    *)
        echo "Unknown environment: $1" >&2
        exit 2
esac
shift

case "$1" in
    g*)  METHOD=GET;;
    po*) METHOD=POST;;
    pu*) METHOD=PUT;;
    d*)  METHOD=DELETE;;
    *)
        echo "Unknown method: $1" >&2
        exit 3
esac
shift

URL="$1"; shift

if [[ $# -gt 1 ]]; then
    if [[ -f "$1" ]]; then
        BODY="@$1"
    else
        BODY="$1"
    fi
    shift
fi

umask 0077 # protect files like the user credentials cache to be accessible only by current user

######################################################################

function debug() {
    $VERBOSE && echo "$*" >&2
}

function simple_curl() {
    local method=$1; shift
    local url=$1; shift
    local body=$1; shift
    local headers=("$@")

    [[ "${headers[@]}" =~ 'Content-Type:' ]] || headers+=('Content-Type: application/json')
    local rfn="$(mktemp /tmp/${BN}rsp.XXX)"
    local cargs=(-s -A "${BN} v${VERSION}" -w '%{http_code}' -o "${rfn}")
    if $VERBOSE; then cargs+=(-v); else cargs+=(-qf); fi
    cargs+=(-X "$method")
    for hdr in "${headers[@]}"; do cargs+=(-H "$hdr"); done
    [[ -n "$body" ]] && cargs+=(--data-binary "$body")

    CODE="$(curl "${cargs[@]}" "$url" 2> >(sed 's/Bearer .*$/Bearer [REDACTED]/' >&2))"
    local res=$?
    RESPONSE="$(cat "$rfn")"
    rm -f "$rfn"

    if [[ $res -ne 0 ]]; then
        cat <<EOF >&2
FAILED: curl$(printf ' %q' "${cargs[@]}") '$url'
CODE: ${CODE}
RESPONSE: ${RESPONSE}
EOF
        exit 4
    fi
}

function eval_response() {
    eval "$(echo "$RESPONSE" | ruby -rjson -e 'puts JSON.parse($stdin.read).map{|k,v|%{#{k.upcase}="#{v}";}}')"
}

function get_access_token() {
    local now body
    local cache_fn="${HOME}/.${BN}_${CLOUD_ENV}_cache"

    if [[ -f "$cache_fn" ]]; then
        . "$cache_fn"
        now=$(date +%s)
        if [[ $EXPIRES_AT -le $now ]]; then
            echo "Access token is expired." >&2
            unset ACCESS_TOKEN
        fi
    fi

    if [[ -z "$ACCESS_TOKEN" ]]; then
        if [[ -n "$REFRESH_TOKEN" ]]; then
            body='{"grant_type":"refresh_token","refresh_token":"'"${REFRESH_TOKEN}"'"}'
        else
            read -p 'email? ' email
            read -sp ' pass? ' pass
            echo
            body='{"grant_type":"password","username":"'"${email}"'","password":"'"${pass}"'"}'
        fi

        simple_curl POST "https://${CORE}.cloud.unity3d.com/api/login" "$body"
        debug "$RESPONSE"
        eval_response

        EXPIRES_AT=$(( $(date +%s) + $EXPIRES_IN - 30 ))
        echo "ACCESS_TOKEN='${ACCESS_TOKEN}';REFRESH_TOKEN='${REFRESH_TOKEN}';EXPIRES_AT='${EXPIRES_AT}';" > "$cache_fn"
        echo "Access token expires in ${EXPIRES_IN} seconds" >&2
    fi
}

get_access_token

[[ "${HEADERS[@]}" =~ 'Authorization:' ]] || HEADERS+=("Authorization: Bearer ${ACCESS_TOKEN}")
simple_curl "$METHOD" "$URL" "$BODY" "${HEADERS[@]}"
echo "$RESPONSE"
